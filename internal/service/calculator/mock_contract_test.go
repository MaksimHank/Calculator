// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package calculator is a generated GoMock package.
package calculator

import (
	model "calculator/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCalculatorRepository is a mock of CalculatorRepository interface.
type MockCalculatorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorRepositoryMockRecorder
}

// MockCalculatorRepositoryMockRecorder is the mock recorder for MockCalculatorRepository.
type MockCalculatorRepositoryMockRecorder struct {
	mock *MockCalculatorRepository
}

// NewMockCalculatorRepository creates a new mock instance.
func NewMockCalculatorRepository(ctrl *gomock.Controller) *MockCalculatorRepository {
	mock := &MockCalculatorRepository{ctrl: ctrl}
	mock.recorder = &MockCalculatorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculatorRepository) EXPECT() *MockCalculatorRepositoryMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockCalculatorRepository) Insert(operands model.Operands, operator string, result float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Insert", operands, operator, result)
}

// Insert indicates an expected call of Insert.
func (mr *MockCalculatorRepositoryMockRecorder) Insert(operands, operator, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCalculatorRepository)(nil).Insert), operands, operator, result)
}
